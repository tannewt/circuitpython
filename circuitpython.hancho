from hancho import *
import pathlib

top = pathlib.Path.cwd()

compile_circuitpython = Rule(
    desc="Compile {files_in} -> {files_out}",
    command="{compiler} -MMD -c {files_in} {circuitpython_flags} {port_flags} -o {files_out}",
    files_out=str(top / "build/{swap_ext(files_in, '.o')}"),
    depfile="{swap_ext(files_out, '.d')}",
)

link = Rule(
    desc="Link {files_in} -> {files_out}",
    command="{compiler} {files_in} -o {files_out}",
)

qstr_preprocessed = Rule(
    desc="Preprocess QSTRs",
    command='cat {files_in} | sed \'s/^Q(.*)/"&"/\' | {compiler} -DNO_QSTR {cflags} -E - | sed \'s/^\"\\(Q(.*)\\)\"/\1/\' > {files_out}',
    deps=[""]
)

qstr_generated = Rule(
    desc="Generate QSTRs",
    command="python {top}/py/makeqstrdata.py {files_in} > {files_out}",
    deps="{top}/py/makeqstrdata.py",
    top=str(top)
)

def board(
    board_name, compiler="clang", port_flags="", flash_filesystem="external", **kwargs
):
    print("top level", board_name)

    board_id = pathlib.Path.cwd().name
    top_build = top / "build" / board_id
    print("top, board_id", board_id)

    circuitpython_flags = []
    circuitpython_flags.append(f"-I {top}")

    for fs_type in ["internal", "external", "qspi"]:
      value = 1 if flash_filesystem == fs_type else 0
      circuitpython_flags.append(f"-D{fs_type.upper()}_FLASH_FILESYSTEM={value}")

    circuitpython_flags = " ".join(circuitpython_flags)

    qstr_files = [top / "main.c"]
    qstrpp = qstr_preprocessed(files_in=[top / "py/qstrdefs.h"], files_out="qstrdefs.preprocessed.h", compiler=compiler, cflags=" ".join([circuitpython_flags]))
    qstrdefs = qstr_generated(qstrpp, files_out="qstrdefs.generated.h")

    # partial_link()
    objects = []
    objects.append(
        compile_circuitpython(
            top / "main.c",
            top_build / "main.o",
            deps=qstrdefs,
            compiler=compiler,
            circuitpython_flags=circuitpython_flags,
            port_flags=port_flags,
        )
    )

    link(objects, f"circuitpython-{board_id}.elf", compiler=compiler)
